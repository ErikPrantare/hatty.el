* hatty.el
An Emacs package for rendering hats over characters, allowing words to
be indexed quickly from any point in the buffer.

This package provides a mechanism for building interfaces overcoming a
core limitation of tools like [[https://github.com/abo-abo/avy][avy]].  With avy, it is necessary to
perform a command to make the interface for choosing a position
visible.  This in turn means that performing an action cannot be done
as one fluent operation.

In contrast, hatty always renders a small symbol over one of the
characters in each word.  This makes it possible to refer to the word
immediately, without the intermediate step of bringing up an
interface.

This library was designed while attempting to make voice control of
Emacs more fluent, where the two-step system of avy made it impossible
to string together a sequence of actions in a single utterance.  This
method of indexing positions was inspired by the [[https://github.com/cursorless-dev/cursorless/][cursorless]] project,
whose hat designs this project reuses.

** Setup
Clone this repo and add the following to your configuration:

#+begin_src elisp
  (add-to-list 'load-path "path/to/hatty/directory")
  (require 'hatty)
  (global-hatty-mode 1)
#+end_src

This starts rendering hats in visited buffers.  To get the position of
a hat, use ~hatty-locate~.  For example,

#+begin_src elisp
  (hatty-locate ?n 'yellow 'bolt)
#+end_src

will return the position of the yellow bolt over character "n".

The available colors and shapes are specified by the variables
~hatty-colors~ and ~hatty-shapes~.

** Configuring hat colors
To change the hat colors, customize ~hatty-colors~.  This should be an
association list mapping an identifier symbol to a color.  A color can
be a hex code like ~"#aa7023"~ or a named color like ~"magentaâ€‹"~ (See
~M-x list-colors-display~ for available color names).  ~hatty-colors~
may contain or exclude arbitrary colours, allowing you to remove, add
or change colors to your liking.

If you use a modus theme, the following will give the hats colors
matching your theme:

#+begin_src elisp
  (setopt hatty-colors
          `((default . ,(modus-themes-color 'fg-dim))
            (yellow . ,(modus-themes-color 'yellow))
            (red . ,(modus-themes-color 'red-intense))
            (blue .  ,(modus-themes-color 'blue-intense))
            (pink . ,(modus-themes-color 'magenta-alt))
            (green . ,(modus-themes-color 'green))))
#+end_src

** Versioning system
This project uses [[https://semver.org/][semantic versioning]].  While still on 0.y.z, an
increment of y signals breaking changes.

** Running tests
#+begin_src sh
  emacs -Q -l hatty.el -l test.el --eval '(ert t)'
#+end_src

It is not possible to run the ERT tests in batch mode, as the tests
require a graphical display to measure the sice of rendered text.
