* hatty.el
A package for rendering hats over characters in emacs, allowing words
to be indexed quickly from any point in the buffer.

** Setup
Clone this repo and add the following to your configuration:

#+begin_src elisp
  (add-to-list 'load-path "path/to/hatty/directory")
  (require 'hatty)
  (global-hatty-mode 1)
#+end_src

This starts rendering hats in visited buffers.  To get the position of
a hat, use ~hatty-locate~.  For example,

#+begin_src elisp
  (hatty-locate ?n 'yellow 'bolt)
#+end_src

will return the position of the yellow bolt over character "n".

To change the hat colors, set ~hatty-colors~.  This should be an
association list mapping an identifier symbol to a string,
representing a color.  This includes color names like "red", "green",
"magenta", as well as hex codes like "#aa7023".  See
~list-colors-display~ for available color names ~hatty-colors~ may
contain or exclude arbitrary colours, allowing you to remove, add or
change the colors to your liking.

If you use a modus theme, the following will give the hats colors
matching your theme:

#+begin_src elisp
  (setopt hatty-colors
          `((white . ,(modus-themes-color 'fg-dim))
            (yellow . ,(modus-themes-color 'yellow))
            (red . ,(modus-themes-color 'red-intense))
            (blue .  ,(modus-themes-color 'blue-intense))
            (pink . ,(modus-themes-color 'magenta-alt))
            (green . ,(modus-themes-color 'green))))
#+end_src

** Versioning system
This project uses [[https://semver.org/][semantic versioning]].  While still on 0.y.z, an
increment of y signals breaking changes.

** Running tests
#+begin_src sh
  emacs -Q -l hatty.el -l test.el --eval '(ert t)'
#+end_src

It is not possible to run the ERT tests in batch mode, as the tests
require a graphical display to measure the sice of rendered text.

** Other
Thanks to the [[https://github.com/cursorless-dev/cursorless/][cursorless]] project for inspiration and hat designs.
